package migrations

import (
	"crypto/rand"
	"fmt"
	"lamas/models"
	"os"

	"github.com/pocketbase/dbx"
	"github.com/pocketbase/pocketbase/daos"
	m "github.com/pocketbase/pocketbase/migrations"
)

func init() {
	m.Register(func(db dbx.Builder) error {
		dao := daos.New(db)

		configuration := &models.Configuration{}
		configuration.Id = models.ConfigurationSingleRecordId

		configuration.BotToken = os.Getenv("INITIALIZE_TELEGRAM_TOKEN")
		configuration.BotUsername = ""
		configuration.BotNameRu = "LampaS"
		configuration.BotNameUk = "LampaS"
		configuration.BotDescriptionRu = "üê≥ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
		configuration.BotDescriptionUk = "üê≥ –ó–∞–∫—Ä–∏—Ç–∏–π –∫–ª—É–± –≤—ñ–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
		configuration.BotShortDescriptionRu = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º. –•–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è? –ü–æ–ø—Ä–æ—Å–∏ –¥—Ä—É–∑–µ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ üê≥"
		configuration.BotShortDescriptionUk = "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∑–∞–∫—Ä–∏—Ç–æ–≥–æ –∫–ª—É–±—É –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏. –•–æ—á–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è? –ü–æ–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–æ–±—ñ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è üê≥"

		configuration.AppDefaultLang = "ru"
		configuration.AppTitleRu = "–ö–ª—É–± —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"
		configuration.AppTitleUk = "–ö–ª—É–± –≤—ñ–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
		configuration.AppDescriptionRu = "üê≥ LampaS ‚Äî —ç—Ç–æ OpenSource –ø—Ä–æ–µ–∫—Ç, —Ü–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–±–ª–µ–≥—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º self-hosted —Å–µ—Ä–≤–∏—Å–∞–º. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –º–æ–∂–Ω–æ –Ω–∞ <a href=\"https://github.com/docker-pet\" target=\"_blank\">GitHub</a>."
		configuration.AppDescriptionUk = "üê≥ LampaS ‚Äî —Ü–µ OpenSource –ø—Ä–æ–µ–∫—Ç, –º–µ—Ç–∞ —è–∫–æ–≥–æ –ø–æ–ª–µ–≥—à–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ä—ñ–∑–Ω–∏—Ö self-hosted —Å–µ—Ä–≤—ñ—Å—ñ–≤. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π –∫–æ–¥ –º–æ–∂–Ω–∞ –Ω–∞ <a href=\"https://github.com/docker-pet\" target=\"_blank\">GitHub</a>."

		// Generate encryption key
		CookieEncryptionKey := make([]byte, 16)
		rand.Read(CookieEncryptionKey)
		configuration.CookieEncryptionKey = fmt.Sprintf("%x", CookieEncryptionKey)

		return dao.Save(configuration)
	}, func(db dbx.Builder) error {
		dao := daos.New(db)

		configuration := models.GetConfiguration(dao)
		if configuration.HasId() {
			return dao.Delete(configuration)
		}

		return nil
	})
}
